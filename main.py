from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.label import Label
from kivy.uix.button import Button
from kivy.uix.spinner import Spinner
from kivy.clock import Clock
import random


class TradingApp(BoxLayout):
    def __init__(self, **kwargs):
        super().__init__(orientation='vertical', **kwargs)

        self.pair_spinner = Spinner(
            text='–í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É',
            values=('EUR/USD', 'BTC/USDT', 'ETH/USDT'),
            size_hint=(1, None),
            height=50
        )
        self.add_widget(self.pair_spinner)

        self.time_spinner = Spinner(
            text='–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏',
            values=('15 —Å–µ–∫', '30 —Å–µ–∫', '1 –º–∏–Ω', '5 –º–∏–Ω', '15 –º–∏–Ω'),
            size_hint=(1, None),
            height=50
        )
        self.add_widget(self.time_spinner)

        self.result_label = Label(text='üéØ –°–∏–≥–Ω–∞–ª –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å', font_size=20)
        self.add_widget(self.result_label)

        self.signal_button = Button(text='–ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª', size_hint=(1, None), height=50)
        self.signal_button.bind(on_press=self.start_timer)
        self.add_widget(self.signal_button)

        self.timer_event = None
        self.remaining_seconds = 0

    def start_timer(self, instance):
        time_text = self.time_spinner.text

        time_mapping = {
            '15 —Å–µ–∫': 15,
            '30 —Å–µ–∫': 30,
            '1 –º–∏–Ω': 60,
            '5 –º–∏–Ω': 300,
            '15 –º–∏–Ω': 900
        }

        if time_text not in time_mapping:
            self.result_label.text = '‚ùå –í—ã–±–µ—Ä–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è!'
            return

        self.remaining_seconds = time_mapping[time_text]
        self.result_label.text = f'‚è≥ –û–∂–∏–¥–∞–µ–º {self.remaining_seconds} —Å–µ–∫...'
        self.signal_button.disabled = True

        self.timer_event = Clock.schedule_interval(self.update_timer, 1)

    def update_timer(self, dt):
        self.remaining_seconds -= 1
        if self.remaining_seconds <= 0:
            Clock.unschedule(self.timer_event)
            self.show_signal()
        else:
            self.result_label.text = f'‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {self.remaining_seconds} —Å–µ–∫'

    def show_signal(self):
        signal = random.choice(['üìà –í–í–ï–†–•', 'üìâ –í–ù–ò–ó'])
        self.result_label.text = f'üéØ –°–∏–≥–Ω–∞–ª: {signal}'
        self.signal_button.disabled = False


class TradingSignalApp(App):
    def build(self):
        return TradingApp()


if __name__ == '__main__':
    TradingSignalApp().run()
